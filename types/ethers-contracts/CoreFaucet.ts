/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface CoreFaucetInterface extends Interface {
    getFunction(nameOrSignature: "CLAIM_TYPEHASH" | "amountPerClaim" | "claim" | "claimWithSig" | "cooldownSeconds" | "core" | "drain" | "eip712Domain" | "lastClaimTimestamp" | "nonces" | "owner" | "paused" | "renounceOwnership" | "setAmountPerClaim" | "setCooldownSeconds" | "setPaused" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AmountPerClaimUpdated" | "Claimed" | "CooldownUpdated" | "Drain" | "EIP712DomainChanged" | "OwnershipTransferred" | "PausedUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'CLAIM_TYPEHASH', values?: undefined): string;
encodeFunctionData(functionFragment: 'amountPerClaim', values?: undefined): string;
encodeFunctionData(functionFragment: 'claim', values?: undefined): string;
encodeFunctionData(functionFragment: 'claimWithSig', values: [AddressLike, BigNumberish, BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'cooldownSeconds', values?: undefined): string;
encodeFunctionData(functionFragment: 'core', values?: undefined): string;
encodeFunctionData(functionFragment: 'drain', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'eip712Domain', values?: undefined): string;
encodeFunctionData(functionFragment: 'lastClaimTimestamp', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'nonces', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'setAmountPerClaim', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setCooldownSeconds', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setPaused', values: [boolean]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'CLAIM_TYPEHASH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'amountPerClaim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimWithSig', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cooldownSeconds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'core', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'drain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'eip712Domain', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'lastClaimTimestamp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setAmountPerClaim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setCooldownSeconds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace AmountPerClaimUpdatedEvent {
      export type InputTuple = [oldAmount: BigNumberish, newAmount: BigNumberish];
      export type OutputTuple = [oldAmount: bigint, newAmount: bigint];
      export interface OutputObject {oldAmount: bigint, newAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ClaimedEvent {
      export type InputTuple = [who: AddressLike, amount: BigNumberish, timestamp: BigNumberish];
      export type OutputTuple = [who: string, amount: bigint, timestamp: bigint];
      export interface OutputObject {who: string, amount: bigint, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CooldownUpdatedEvent {
      export type InputTuple = [oldSeconds: BigNumberish, newSeconds: BigNumberish];
      export type OutputTuple = [oldSeconds: bigint, newSeconds: bigint];
      export interface OutputObject {oldSeconds: bigint, newSeconds: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DrainEvent {
      export type InputTuple = [to: AddressLike, amount: BigNumberish];
      export type OutputTuple = [to: string, amount: bigint];
      export interface OutputObject {to: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EIP712DomainChangedEvent {
      export type InputTuple = [];
      export type OutputTuple = [];
      export interface OutputObject {};
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PausedUpdatedEvent {
      export type InputTuple = [oldPaused: boolean, newPaused: boolean];
      export type OutputTuple = [oldPaused: boolean, newPaused: boolean];
      export interface OutputObject {oldPaused: boolean, newPaused: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CoreFaucet extends BaseContract {
    
    connect(runner?: ContractRunner | null): CoreFaucet;
    waitForDeployment(): Promise<this>;

    interface: CoreFaucetInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    CLAIM_TYPEHASH: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    amountPerClaim: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    claim: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    claimWithSig: TypedContractMethod<
      [to: AddressLike, nonce: BigNumberish, deadline: BigNumberish, signature: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    cooldownSeconds: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    core: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    drain: TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    eip712Domain: TypedContractMethod<
      [],
      [[string, string, string, bigint, string, string, bigint[]] & {fields: string, name: string, version: string, chainId: bigint, verifyingContract: string, salt: string, extensions: bigint[] }],
      'view'
    >
    

    
    lastClaimTimestamp: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    nonces: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    paused: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    setAmountPerClaim: TypedContractMethod<
      [newAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setCooldownSeconds: TypedContractMethod<
      [newSeconds: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setPaused: TypedContractMethod<
      [newPaused: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'CLAIM_TYPEHASH'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'amountPerClaim'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'claim'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'claimWithSig'): TypedContractMethod<
      [to: AddressLike, nonce: BigNumberish, deadline: BigNumberish, signature: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'cooldownSeconds'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'core'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'drain'): TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'eip712Domain'): TypedContractMethod<
      [],
      [[string, string, string, bigint, string, string, bigint[]] & {fields: string, name: string, version: string, chainId: bigint, verifyingContract: string, salt: string, extensions: bigint[] }],
      'view'
    >;
getFunction(nameOrSignature: 'lastClaimTimestamp'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'nonces'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'paused'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setAmountPerClaim'): TypedContractMethod<
      [newAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setCooldownSeconds'): TypedContractMethod<
      [newSeconds: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setPaused'): TypedContractMethod<
      [newPaused: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'AmountPerClaimUpdated'): TypedContractEvent<AmountPerClaimUpdatedEvent.InputTuple, AmountPerClaimUpdatedEvent.OutputTuple, AmountPerClaimUpdatedEvent.OutputObject>;
getEvent(key: 'Claimed'): TypedContractEvent<ClaimedEvent.InputTuple, ClaimedEvent.OutputTuple, ClaimedEvent.OutputObject>;
getEvent(key: 'CooldownUpdated'): TypedContractEvent<CooldownUpdatedEvent.InputTuple, CooldownUpdatedEvent.OutputTuple, CooldownUpdatedEvent.OutputObject>;
getEvent(key: 'Drain'): TypedContractEvent<DrainEvent.InputTuple, DrainEvent.OutputTuple, DrainEvent.OutputObject>;
getEvent(key: 'EIP712DomainChanged'): TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'PausedUpdated'): TypedContractEvent<PausedUpdatedEvent.InputTuple, PausedUpdatedEvent.OutputTuple, PausedUpdatedEvent.OutputObject>;

    filters: {
      
      'AmountPerClaimUpdated(uint256,uint256)': TypedContractEvent<AmountPerClaimUpdatedEvent.InputTuple, AmountPerClaimUpdatedEvent.OutputTuple, AmountPerClaimUpdatedEvent.OutputObject>;
      AmountPerClaimUpdated: TypedContractEvent<AmountPerClaimUpdatedEvent.InputTuple, AmountPerClaimUpdatedEvent.OutputTuple, AmountPerClaimUpdatedEvent.OutputObject>;
    

      'Claimed(address,uint256,uint256)': TypedContractEvent<ClaimedEvent.InputTuple, ClaimedEvent.OutputTuple, ClaimedEvent.OutputObject>;
      Claimed: TypedContractEvent<ClaimedEvent.InputTuple, ClaimedEvent.OutputTuple, ClaimedEvent.OutputObject>;
    

      'CooldownUpdated(uint256,uint256)': TypedContractEvent<CooldownUpdatedEvent.InputTuple, CooldownUpdatedEvent.OutputTuple, CooldownUpdatedEvent.OutputObject>;
      CooldownUpdated: TypedContractEvent<CooldownUpdatedEvent.InputTuple, CooldownUpdatedEvent.OutputTuple, CooldownUpdatedEvent.OutputObject>;
    

      'Drain(address,uint256)': TypedContractEvent<DrainEvent.InputTuple, DrainEvent.OutputTuple, DrainEvent.OutputObject>;
      Drain: TypedContractEvent<DrainEvent.InputTuple, DrainEvent.OutputTuple, DrainEvent.OutputObject>;
    

      'EIP712DomainChanged()': TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
      EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'PausedUpdated(bool,bool)': TypedContractEvent<PausedUpdatedEvent.InputTuple, PausedUpdatedEvent.OutputTuple, PausedUpdatedEvent.OutputObject>;
      PausedUpdated: TypedContractEvent<PausedUpdatedEvent.InputTuple, PausedUpdatedEvent.OutputTuple, PausedUpdatedEvent.OutputObject>;
    
    };
  }