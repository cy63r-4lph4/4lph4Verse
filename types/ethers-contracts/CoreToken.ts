/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface CoreTokenInterface extends Interface {
    getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "burn" | "decimals" | "feeBps" | "feeBurns" | "isFeeExempt" | "mint" | "name" | "owner" | "renounceOwnership" | "setFeeBps" | "setFeeBurnMode" | "setFeeExempt" | "setTreasury" | "symbol" | "totalSupply" | "transfer" | "transferFrom" | "transferOwnership" | "treasury"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Approval" | "FeeBpsUpdated" | "FeeBurnModeUpdated" | "FeeExemptUpdated" | "OwnershipTransferred" | "Transfer" | "TreasuryUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'allowance', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'approve', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'balanceOf', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'burn', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
encodeFunctionData(functionFragment: 'feeBps', values?: undefined): string;
encodeFunctionData(functionFragment: 'feeBurns', values?: undefined): string;
encodeFunctionData(functionFragment: 'isFeeExempt', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'mint', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'name', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'setFeeBps', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setFeeBurnMode', values: [boolean]): string;
encodeFunctionData(functionFragment: 'setFeeExempt', values: [AddressLike, boolean]): string;
encodeFunctionData(functionFragment: 'setTreasury', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
encodeFunctionData(functionFragment: 'transfer', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferFrom', values: [AddressLike, AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'feeBps', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'feeBurns', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isFeeExempt', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setFeeBps', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setFeeBurnMode', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setFeeExempt', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  }

  
    export namespace ApprovalEvent {
      export type InputTuple = [owner: AddressLike, spender: AddressLike, value: BigNumberish];
      export type OutputTuple = [owner: string, spender: string, value: bigint];
      export interface OutputObject {owner: string, spender: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FeeBpsUpdatedEvent {
      export type InputTuple = [oldBps: BigNumberish, newBps: BigNumberish];
      export type OutputTuple = [oldBps: bigint, newBps: bigint];
      export interface OutputObject {oldBps: bigint, newBps: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FeeBurnModeUpdatedEvent {
      export type InputTuple = [oldMode: boolean, newMode: boolean];
      export type OutputTuple = [oldMode: boolean, newMode: boolean];
      export interface OutputObject {oldMode: boolean, newMode: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FeeExemptUpdatedEvent {
      export type InputTuple = [account: AddressLike, exempt: boolean];
      export type OutputTuple = [account: string, exempt: boolean];
      export interface OutputObject {account: string, exempt: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, value: BigNumberish];
      export type OutputTuple = [from: string, to: string, value: bigint];
      export interface OutputObject {from: string, to: string, value: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TreasuryUpdatedEvent {
      export type InputTuple = [oldTreasury: AddressLike, newTreasury: AddressLike];
      export type OutputTuple = [oldTreasury: string, newTreasury: string];
      export interface OutputObject {oldTreasury: string, newTreasury: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CoreToken extends BaseContract {
    
    connect(runner?: ContractRunner | null): CoreToken;
    waitForDeployment(): Promise<this>;

    interface: CoreTokenInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    allowance: TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    approve: TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    balanceOf: TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    burn: TypedContractMethod<
      [from: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    decimals: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    feeBps: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    feeBurns: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    isFeeExempt: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    mint: TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    name: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    setFeeBps: TypedContractMethod<
      [newBps: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setFeeBurnMode: TypedContractMethod<
      [newMode: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    setFeeExempt: TypedContractMethod<
      [account: AddressLike, exempt: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    setTreasury: TypedContractMethod<
      [newTreasury: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    symbol: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    totalSupply: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transfer: TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferFrom: TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    treasury: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'allowance'): TypedContractMethod<
      [owner: AddressLike, spender: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'approve'): TypedContractMethod<
      [spender: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'balanceOf'): TypedContractMethod<
      [account: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'burn'): TypedContractMethod<
      [from: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'decimals'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'feeBps'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'feeBurns'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isFeeExempt'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'mint'): TypedContractMethod<
      [to: AddressLike, amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'name'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setFeeBps'): TypedContractMethod<
      [newBps: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setFeeBurnMode'): TypedContractMethod<
      [newMode: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setFeeExempt'): TypedContractMethod<
      [account: AddressLike, exempt: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setTreasury'): TypedContractMethod<
      [newTreasury: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'symbol'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalSupply'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transfer'): TypedContractMethod<
      [to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferFrom'): TypedContractMethod<
      [from: AddressLike, to: AddressLike, value: BigNumberish, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'treasury'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'Approval'): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
getEvent(key: 'FeeBpsUpdated'): TypedContractEvent<FeeBpsUpdatedEvent.InputTuple, FeeBpsUpdatedEvent.OutputTuple, FeeBpsUpdatedEvent.OutputObject>;
getEvent(key: 'FeeBurnModeUpdated'): TypedContractEvent<FeeBurnModeUpdatedEvent.InputTuple, FeeBurnModeUpdatedEvent.OutputTuple, FeeBurnModeUpdatedEvent.OutputObject>;
getEvent(key: 'FeeExemptUpdated'): TypedContractEvent<FeeExemptUpdatedEvent.InputTuple, FeeExemptUpdatedEvent.OutputTuple, FeeExemptUpdatedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Transfer'): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
getEvent(key: 'TreasuryUpdated'): TypedContractEvent<TreasuryUpdatedEvent.InputTuple, TreasuryUpdatedEvent.OutputTuple, TreasuryUpdatedEvent.OutputObject>;

    filters: {
      
      'Approval(address,address,uint256)': TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
      Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    

      'FeeBpsUpdated(uint256,uint256)': TypedContractEvent<FeeBpsUpdatedEvent.InputTuple, FeeBpsUpdatedEvent.OutputTuple, FeeBpsUpdatedEvent.OutputObject>;
      FeeBpsUpdated: TypedContractEvent<FeeBpsUpdatedEvent.InputTuple, FeeBpsUpdatedEvent.OutputTuple, FeeBpsUpdatedEvent.OutputObject>;
    

      'FeeBurnModeUpdated(bool,bool)': TypedContractEvent<FeeBurnModeUpdatedEvent.InputTuple, FeeBurnModeUpdatedEvent.OutputTuple, FeeBurnModeUpdatedEvent.OutputObject>;
      FeeBurnModeUpdated: TypedContractEvent<FeeBurnModeUpdatedEvent.InputTuple, FeeBurnModeUpdatedEvent.OutputTuple, FeeBurnModeUpdatedEvent.OutputObject>;
    

      'FeeExemptUpdated(address,bool)': TypedContractEvent<FeeExemptUpdatedEvent.InputTuple, FeeExemptUpdatedEvent.OutputTuple, FeeExemptUpdatedEvent.OutputObject>;
      FeeExemptUpdated: TypedContractEvent<FeeExemptUpdatedEvent.InputTuple, FeeExemptUpdatedEvent.OutputTuple, FeeExemptUpdatedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Transfer(address,address,uint256)': TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
      Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    

      'TreasuryUpdated(address,address)': TypedContractEvent<TreasuryUpdatedEvent.InputTuple, TreasuryUpdatedEvent.OutputTuple, TreasuryUpdatedEvent.OutputObject>;
      TreasuryUpdated: TypedContractEvent<TreasuryUpdatedEvent.InputTuple, TreasuryUpdatedEvent.OutputTuple, TreasuryUpdatedEvent.OutputObject>;
    
    };
  }