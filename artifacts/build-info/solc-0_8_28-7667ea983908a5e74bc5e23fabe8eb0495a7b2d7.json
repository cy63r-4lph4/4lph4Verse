{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-7667ea983908a5e74bc5e23fabe8eb0495a7b2d7",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/core/ScoreModelBase.sol": "project/contracts/core/ScoreModelBase.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@verse/contracts/=project/contracts/",
        "project/:@verse/contracts/=project/contracts/"
      ]
    },
    "sources": {
      "project/contracts/core/ScoreModelBase.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@verse/contracts/interfaces/IScoreModel.sol\";\nimport \"@verse/contracts/interfaces/IVerseReputationHub.sol\";\n\n// ---------- External Interfaces ----------\n\n/// @title ScoreModelBase\n/// @notice Abstract base for app-specific scoring models in the 4lph4Verse.\n/// @dev Each app should deploy its own score model extending this base and override `_computeScore`.\nabstract contract ScoreModelBase is IScoreModel {\n    /// @notice The fixed appId this model scores (e.g., keccak256(\"HireCore\")).\n    bytes32 public immutable appId;\n\n    /// @notice Reputation hub address (read-only).\n    IVerseReputationHub public immutable reputationHub;\n\n    constructor(bytes32 _appId, address _hub) {\n        require(_appId != 0, \"bad appId\");\n        require(_hub != address(0), \"bad hub\");\n        appId = _appId;\n        reputationHub = IVerseReputationHub(_hub);\n    }\n\n    /// @inheritdoc IScoreModel\n    function scoreOf(uint256 verseId) external view override returns (uint256) {\n        return _computeScore(verseId);\n    }\n\n    /// @notice Hook for child contracts: implement app-specific scoring logic.\n    /// @param verseId The Verse profile ID to score.\n    /// @return score Computed score.\n    function _computeScore(\n        uint256 verseId\n    ) internal view virtual returns (uint256 score);\n}\n"
      },
      "project/contracts/interfaces/IScoreModel.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title IScoreModel\n/// @notice Standard interface for per-app scoring models in the Verse.\ninterface IScoreModel {\n    /// @notice Returns the computed score of a given verseId.\n    /// @param verseId The Verse profile ID of the user.\n    /// @return score The computed score (app-specific units, 0 if none).\n    function scoreOf(uint256 verseId) external view returns (uint256 score);\n}\n"
      },
      "project/contracts/interfaces/IVerseReputationHub.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title IVerseReputationHub\n/// @notice Minimal interface for logging reputation-related events in the Verse.\ninterface IVerseReputationHub {\n    /// @notice Log that a profile has completed an action in an app.\n    /// @param verseId The Verse profile ID of the user.\n    /// @param token   The payment/reward token (0 = native).\n    /// @param amount  Amount earned (can be 0 if not relevant).\n    function logCompleted(uint256 verseId, address token, uint256 amount) external;\n\n    /// @notice Log that a profile has cancelled an action in an app.\n    /// @param verseId The Verse profile ID of the user.\n    function logCancelled(uint256 verseId) external;\n\n    /// @notice Get detailed activity for a profile in a given app.\n    /// @param verseId The Verse profile ID.\n    /// @param appId   The appâ€™s identifier (keccak256(\"HireCore\"), etc.).\n    /// @param token   Token address to check earned amounts.\n    /// @return completed Count of completed actions.\n    /// @return cancelled Count of cancelled actions.\n    /// @return earned    Total tokens earned for this token.\n    function getActivity(\n        uint256 verseId,\n        bytes32 appId,\n        address token\n    ) external view returns (uint64 completed, uint64 cancelled, uint256 earned);\n\n    /// @notice Get just the raw counts (no token info).\n    function getRawCounts(uint256 verseId, bytes32 appId)\n        external\n        view\n        returns (uint64 completed, uint64 cancelled);\n}\n"
      }
    }
  }
}